def propfile
pipeline {
	agent {
    		kubernetes {
			label 'SpringBootRestApp'
			defaultContainer 'jnlp'
			yaml """
			apiVersion: v1
			kind: Pod
			metadata:
			labels:
			  component: ci
			spec:
			  containers:
			  - name: gradle
			    image: gradle:3.5-jdk8-alpine
			    command:
			    - cat
			    tty: true
			"""
		}
	}
	stages {
		stage('Build & Unit Test') {
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
                echo 'Building'
		propfile = readProperties(file: './project.properties_PROD')
		 --no-daemon -p SomsStoreAction build 
		//adding Jacoco and javadoc steps
		if (propfile['javadoc'] == "true") {
								sh 'mvn javadoc:aggregate'
							}
							if (propfile['jacoco'] == "true") {
								jacoco( 
									execPattern: '**/*.exec',
									classPattern: '**/*.class',
									sourcePattern: '**/*.java',
									exclusionPattern: '**/test*'
								)
							}
               				 }
              			}
            		}
         	 }
        }
        stage("Deploy") {
	       when { expression {env.GIT_BRANCH == 'dev' || env.GIT_BRANCH == 'release'|| propfile['feature_deploy'] == "true" }}
		     steps {
				container('gradle') {
					script {
                                withMaven(maven: 'MAVEN-3.6.3') {
							propfile = readProperties(file: './project.properties')
							if (propfile['feature_deploy'] == "true" ) {
									USERNAME=propfile['USERNAME_FEATURE_DEPLOY']
									HOSTS=propfile['HOSTS_FEATURE_DEPLOY']
								}
								if (env.GIT_BRANCH == 'dev' ) {
									USERNAME=propfile['USERNAME_DEV_DEPLOY']
									HOSTS=propfile['HOSTS_DEV_DEPLOY']
								}
								if (env.GIT_BRANCH == 'release') {
									USERNAME=propfile['USERNAME_RELEASE_DEPLOY']
									HOSTS=propfile['HOSTS_RELEASE_DEPLOY']
								}
								HOSTS.tokenize(',').each { HOSTNAME ->
                
              cat << EOF > propfile['deployment_cli_file']
              if (outcome != success) of /deployment=propfile['war_file']:read-resource
              echo ###
              echo ### Deploy propfile['war_file'] to somslite-cluster
              echo ###
              deploy propfile['war_deploy_dir']/propfile['war_file'] --server-groups=propfile['server_groups']
              else
              echo ###
              echo ### Module propfile['war_file'] already installed, deploying with rolling update
              echo ###
              deploy propfile['war_deploy_dir']/propfile['war_file'] --name=propfile['war_file'] --runtime-name=propfile['war_file'] --headers={rollout propfile['server_groups'](rolling-to-servers=true)} --force
              end-if
              echo
              echo ###
              echo ### Restarting servers
              echo ###
              echo
              echo ### Restarting somslite-server01
              if (outcome != success) of /host=node1/server-config=somslite-server01:restart
              echo ### Server somslite-server01 restart failed
              echo
              else
              echo ### Server somslite-server01 restarted
              echo
              end-if
              EOF
	     
              echo 'coping property file into server'
		mkdir -p $WORKSPACE/artifacts
		cp -R /C/windows/system32/config/systemprofile/AppData/Local/Jenkins/.jenkins/workspace/DevOps_SomsLite/DevOps_SomsLite_release-2021_3.2/artifacts/* $WORKSPACE/artifacts/
		cd $WORKSPACE/artifacts/properties/
		mv dev_app_1_config-mule.properties config-mule.properties
		mv dev_app_1_log4j.properties log4j.properties
		mv dev_app_1_config.properties config.properties
		scp -i /c/Users/ernesto.alvarez/.ssh/id_rsa_jenkins -o StrictHostKeyChecking=no -rp $WORKSPACE/artifacts/propfile['war_file'] $target_user@997725-DEV-EPIC-APP-01.signetomni.com:propfile['war_deploy_dir']
		scp -i /c/Users/ernesto.alvarez/.ssh/id_rsa_jenkins -o StrictHostKeyChecking=no -rp $WORKSPACE/artifacts/properties/config-mule.properties $target_user@997725-DEV-EPIC-APP-01.signetomni.com:propfile['property1_deploy_dir']
		scp -i /c/Users/ernesto.alvarez/.ssh/id_rsa_jenkins -o StrictHostKeyChecking=no -rp $WORKSPACE/artifacts/properties/log4j.properties $target_user@997725-DEV-EPIC-APP-01.signetomni.com:propfile['property1_deploy_dir']
		scp -i /c/Users/ernesto.alvarez/.ssh/id_rsa_jenkins -o StrictHostKeyChecking=no -rp $WORKSPACE/artifacts/properties/config.properties $target_user@997725-DEV-EPIC-APP-01.signetomni.com:propfile['property2_deploy_dir']
		scp -i /c/Users/ernesto.alvarez/.ssh/id_rsa_jenkins -o StrictHostKeyChecking=no -rp $WORKSPACE/propfile['deployment_cli_file'] propfile['target_user']@997725-DEV-EPIC-APP-01.signetomni.com:propfile['war_deploy_dir']
		echo' deploying'
		ssh -i /c/Users/ernesto.alvarez/.ssh/id_rsa_jenkins -o StrictHostKeyChecking=no propfile['target_user']@997725-DEV-EPIC-APP-01.signetomni.com "propfile['cli_script'] --connect --controller=997725-DEV-EPIC-APP-01.signetomni.com:propfile['target_port'] --timeout=20000 --file=propfile['war_deploy_dir']/propfile['deployment_cli_file'] --user=propfile['jbosscli_offline_user'] --password='98&OpUw2ZgBTE*R2'"
			}
		}
	}
   }
 }
}
stage('Post Deploy Tests') {
when { expression {env.GIT_BRANCH == 'dev' || env.GIT_BRANCH == 'release'|| propfile['feature_deploy'] == "true" }}
		parallel {
			stage('Smoke Test') {
				steps {
				  environment {
                                   worksoftcred= credentials('jenkins-worksoft-creds') 
				              }
					echo "I am executing Smoke Test on target dev environment post deployment"
				}
				/*
				echo "username is :propfile['uname']"
				token=$(curl -X POST propfile['uri']/token -H 'cache-control: no-cache' -H 'content-type: application/x-www-form-urlencoded' -d 'grant_type=password&username=propfile['uname']&password=$worksoftcred')
				echo "The token is: $token"
				#Get curl response for any current test executions
				RESP=`curl -X GET "propfile['uri']/RequestsRunning" -H "accept: application/xml" -H "authorization: bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY"`
				echo "The response for current execution status is: $RESP"
				if [ "$RESP" != "[]" ];
				then
				 echo "There is a test executing currently in Worksoft. Hence, not proceeding with the execution of Worksoft test cases."
				 exit 1
				else
				echo "There are no tests executing right now. Hence, proceeding with Worksoft test execution"
				fi 
				guid=$(curl -X PUT -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "parameters: TestEnv propfile['stage_name']" -H "id: propfile['RequestID'}" $propfile['uri']/ExecuteRequest/ | tr -d \")
				echo "The GUID is: $guid"

				status=$(curl -X GET -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "APIRequestID: $guid" ${uri}/ExecutionStatus/ | awk -F':' '{print $2}' | tr -d \" | tr -d \})
				echo "The status is: $status"

				while [[ $status != *"Completed"* ]]
				 do
					status=$(curl -X GET -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "APIRequestID: $guid" $propfile['uri']/ExecutionStatus/ | awk -F':' '{print $2}' | tr -d \" | tr -d \})
					echo "The status is: $status"
				 sleep 15
				 done
				 status=$(curl -X GET -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "APIRequestID: $guid" ${uri}/ExecutionStatus/)
				echo "The status is: $status"
				execstatus=$(curl -X GET -H "Authorization: Bearer BHaCkOfURVPP0WuDQL7L5SSrGe88ZuoI7jLaOyJuppL_Ftt9E1_LsWtswJp4whhhVRai34TzF1JDjtiNL2HgfTDTklomm6QW3toif-rfULYJg8PRUlSfacE5WFPqrvB1AJgjVBStcPa2yD5IpliW523ZHj7HVyckghO4kOC2WI-AvKu8R1_EjgGDZrOdVe7Pkq4gXwlLYHvF4hiYa4_gR4Wc_H-joXyXKqln86DS-f82S9dImyiQQjv4iR49VKeAZO31vE7-XOau6jiMHhddWe8yejnPRoQrMDkkPnBx8LscigvaFGNSjZD5mg5IqA-8KO9V1HG4RdBml77HdC44bndDOa3gva6VMm96N5MF0qY" -d "" -H "APIRequestID: $guid" ${uri}/ExecutionStatus/ | awk -F':' '{print $3}' | tr -d \" | tr -d \})
				echo "The exec status is: $execstatus"
				if [[ $execstatus != *Passed* ]];
				then
				    echo "Failed"
				    exit 1
				else
				    echo "Passed"
				    exit
				fi
				exit */
			}
			stage('Security Test') {
				steps {
				  container('gradle') {
					script {
						 withMaven(maven: 'MAVEN-3.6.3') {
							echo 'I am running Security Test here'
						     }
				              }
			             }
		               }
		      }
	      }  
	}
     
  }
		
	
  }
}	
